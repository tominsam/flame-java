Index: src/javax/jmdns/JmDNS.java
===================================================================
RCS file: /cvsroot/jmdns/jmdns/src/javax/jmdns/JmDNS.java,v
retrieving revision 1.19
diff -u -r1.19 JmDNS.java
--- src/javax/jmdns/JmDNS.java	24 Apr 2006 07:46:20 -0000	1.19
+++ src/javax/jmdns/JmDNS.java	13 Jun 2006 22:06:18 -0000
@@ -699,7 +699,7 @@
         String name = type.toLowerCase();
         if (serviceTypes.get(name) == null)
         {
-            if ((type.indexOf("._mdns._udp.") < 0) && !type.endsWith(".in-addr.arpa."))
+            if ((type.indexOf("._dns-sd._udp.") < 0) && !type.endsWith(".in-addr.arpa."))
             {
                 Collection list;
                 synchronized (this)
@@ -965,10 +965,10 @@
             switch (rec.type)
             {
                 case DNSConstants.TYPE_PTR:
-                    // handle _mdns._udp records
-                    if (rec.getName().indexOf("._mdns._udp.") >= 0)
+                    // handle _dns-sd._udp records
+                    if (rec.getName().indexOf("._dns-sd._udp.") >= 0)
                     {
-                        if (!expired && rec.name.startsWith("_services._mdns._udp."))
+                        if (!expired && rec.name.startsWith("_services._dns-sd._udp."))
                         {
                             isInformative = true;
                             registerServiceType(((DNSRecord.Pointer) rec).alias);
@@ -1840,11 +1840,11 @@
                                                     }
                                                 }
                                             }
-                                            if (q.name.equalsIgnoreCase("_services._mdns._udp.local."))
+                                            if (q.name.equalsIgnoreCase("_services._dns-sd._udp.local."))
                                             {
                                                 for (Iterator serviceTypeIterator = serviceTypes.values().iterator(); serviceTypeIterator.hasNext();)
                                                 {
-                                                    answers.add(new DNSRecord.Pointer("_services._mdns._udp.local.", DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, (String) serviceTypeIterator.next()));
+                                                    answers.add(new DNSRecord.Pointer("_services._dns-sd._udp.local.", DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, (String) serviceTypeIterator.next()));
                                                 }
                                             }
                                             break;
@@ -1956,10 +1956,10 @@
                     {
                         logger.finer("run() JmDNS querying type");
                         DNSOutgoing out = new DNSOutgoing(DNSConstants.FLAGS_QR_QUERY);
-                        out.addQuestion(new DNSQuestion("_services._mdns._udp.local.", DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN));
+                        out.addQuestion(new DNSQuestion("_services._dns-sd._udp.local.", DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN));
                         for (Iterator iterator = serviceTypes.values().iterator(); iterator.hasNext();)
                         {
-                            out.addAnswer(new DNSRecord.Pointer("_services._mdns._udp.local.", DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, (String) iterator.next()), 0);
+                            out.addAnswer(new DNSRecord.Pointer("_services._dns-sd._udp.local.", DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, (String) iterator.next()), 0);
                         }
                         send(out);
                     }
